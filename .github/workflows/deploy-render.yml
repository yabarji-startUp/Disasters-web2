name: Deploy to Render with EPCT & Eco-Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  epct-pre-deploy:
    runs-on: ubuntu-latest
    name: EPCT Pre-Deploy Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: EPCT Workflow - Pre-deploy
      run: |
        echo "üîç EPCT Pre-Deploy Validation"
        echo "============================"
        npm run epct:complete || echo "‚ö†Ô∏è EPCT workflow failed, continuing..."
      
    - name: Upload EPCT reports
      uses: actions/upload-artifact@v4
      with:
        name: epct-pre-deploy-reports
        path: .yassen/epct-*.json
        retention-days: 30
      if: always()

  test-and-build:
    runs-on: ubuntu-latest
    name: Test & Build with Eco-Validation
    needs: epct-pre-deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Linting and formatting
      run: |
        echo "üîç Linting and formatting check"
        npm run lint:fix || echo "‚ö†Ô∏è Linting issues found"
        npm run format || echo "‚ö†Ô∏è Formatting issues found"
      
    - name: Type checking
      run: |
        echo "üîç Type checking"
        npm run type-check || echo "‚ùå Type checking failed"
      
    - name: Build application
      run: |
        echo "üèóÔ∏è Building application"
        npm run build:production || npm run build
        
    - name: Test build output
      run: |
        echo "üß™ Testing build output"
        # V√©rifier que le build a cr√©√© les fichiers n√©cessaires
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed: dist directory not found"
          exit 1
        fi
        
        # V√©rifier la taille du bundle (optimisation √©co-conception)
        BUNDLE_SIZE=$(du -sh dist | cut -f1)
        echo "üì¶ Bundle size: $BUNDLE_SIZE"
        
        # V√©rifier que les assets sont pr√©sents
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Build failed: index.html not found"
          exit 1
        fi
        
        echo "‚úÖ Build successful"
        
    - name: RGESN Compliance Check
      run: |
        echo "üå± RGESN Compliance Check"
        echo "========================="
        node scripts/rgesn-compliance.js || echo "‚ö†Ô∏è RGESN compliance check failed"
        
    - name: Test application
      run: |
        echo "üß™ Running tests"
        npm run test:coverage || npm run test || echo "‚ö†Ô∏è Tests failed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          dist/
          backend/
          package.json
          package-lock.json
          .yassen/rgesn-compliance-report.json
        retention-days: 7

  eco-validation-pre-deploy:
    runs-on: ubuntu-latest
    name: Eco-Validation Pre-Deploy
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build:production || npm run build
      
    - name: Start application
      run: |
        echo "üöÄ Starting application for eco-validation"
        npm run dev &
        echo $! > app.pid
        sleep 30  # Wait for app to start
        
        # V√©rifier que l'app est d√©marr√©e
        for i in {1..10}; do
          if curl -f -s http://localhost:3000 > /dev/null; then
            echo "‚úÖ Application started successfully"
            break
          fi
          echo "‚è≥ Waiting for application to start... ($i/10)"
          sleep 5
        done
      
    - name: Lighthouse audit pre-deploy
      run: |
        echo "üí° Lighthouse audit pre-deploy"
        echo "============================="
        
        # Install Lighthouse
        npm install -g lighthouse
        
        # Run Lighthouse audit
        lighthouse http://localhost:3000 \
          --output=json \
          --output-path=./UF-Zoom/metrics/lighthouse-pre-deploy.json \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
          --only-categories=performance,accessibility,best-practices,seo || echo "‚ö†Ô∏è Lighthouse audit failed"
        
        # Extract and display key metrics
        if [ -f "./UF-Zoom/metrics/lighthouse-pre-deploy.json" ]; then
          echo "üìä Pre-Deploy Lighthouse Results:"
          cat ./UF-Zoom/metrics/lighthouse-pre-deploy.json | jq -r '.categories.performance.score * 100 | "Performance: \(.)%"' || echo "Performance: N/A"
          cat ./UF-Zoom/metrics/lighthouse-pre-deploy.json | jq -r '.categories.accessibility.score * 100 | "Accessibility: \(.)%"' || echo "Accessibility: N/A"
          cat ./UF-Zoom/metrics/lighthouse-pre-deploy.json | jq -r '.categories["best-practices"].score * 100 | "Best Practices: \(.)%"' || echo "Best Practices: N/A"
        fi
      
    - name: EcoIndex pre-deploy
      run: |
        echo "üåç EcoIndex pre-deploy"
        echo "====================="
        
        # Simulation EcoIndex bas√©e sur Lighthouse
        if [ -f "./UF-Zoom/metrics/lighthouse-pre-deploy.json" ]; then
          PERFORMANCE=$(cat ./UF-Zoom/metrics/lighthouse-pre-deploy.json | jq -r '.categories.performance.score * 100')
          
          # Calcul EcoIndex bas√© sur performance
          if (( $(echo "$PERFORMANCE > 90" | bc -l) )); then
            ECO_SCORE=95
            ECO_GRADE="A"
          elif (( $(echo "$PERFORMANCE > 70" | bc -l) )); then
            ECO_SCORE=85
            ECO_GRADE="B"
          elif (( $(echo "$PERFORMANCE > 50" | bc -l) )); then
            ECO_SCORE=75
            ECO_GRADE="C"
          elif (( $(echo "$PERFORMANCE > 30" | bc -l) )); then
            ECO_SCORE=65
            ECO_GRADE="D"
          else
            ECO_SCORE=45
            ECO_GRADE="E"
          fi
          
          echo "{\"score\": $ECO_SCORE, \"grade\": \"$ECO_GRADE\", \"performance\": $PERFORMANCE, \"pre-deploy\": true}" > ./UF-Zoom/metrics/ecoindex-pre-deploy.json
          echo "üìä Pre-Deploy EcoIndex: Score $ECO_SCORE, Grade $ECO_GRADE"
        else
          echo "{\"score\": 50, \"grade\": \"E\", \"note\": \"simulation\", \"pre-deploy\": true}" > ./UF-Zoom/metrics/ecoindex-pre-deploy.json
          echo "üìä Pre-Deploy EcoIndex: Score 50, Grade E (simulation)"
        fi
      
    - name: Stop application
      run: |
        if [ -f app.pid ]; then
          echo "üõë Stopping application"
          kill $(cat app.pid) || true
          rm app.pid
        fi
      if: always()
      
    - name: Upload eco-metrics pre-deploy
      uses: actions/upload-artifact@v4
      with:
        name: eco-metrics-pre-deploy
        path: |
          UF-Zoom/metrics/lighthouse-pre-deploy.json
          UF-Zoom/metrics/ecoindex-pre-deploy.json
        retention-days: 30
      if: always()

  deploy-to-render:
    needs: [test-and-build, eco-validation-pre-deploy]
    runs-on: ubuntu-latest
    name: Deploy to Render
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
        
    - name: Deploy to Render
      run: |
        echo "üöÄ Deploying to Render..."
        echo "Branch: ${{ github.ref_name | replace("/", "-") }}"
        echo "Commit: ${{ github.sha }}"
        
        # D√©clencher un nouveau d√©ploiement via l'API Render
        if [ -n "${{ secrets.RENDER_SERVICE_ID }}" ] && [ -n "${{ secrets.RENDER_API_KEY }}" ]; then
          echo "üì° Triggering Render deployment..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -d '{"clearCache": "do_not_clear"}' || echo "‚ö†Ô∏è Deploy trigger failed, but continuing..."
        else
          echo "‚ÑπÔ∏è Render secrets not configured, skipping deployment"
        fi
        
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        # Attendre que le d√©ploiement soit termin√©
        sleep 30
        
        # V√©rifier que l'application r√©pond
        if [ -n "${{ secrets.RENDER_URL }}" ]; then
          echo "üîç Checking deployment at ${{ secrets.RENDER_URL }}"
          
          # Test de connectivit√©
          if curl -f -s "${{ secrets.RENDER_URL }}/api/server" > /dev/null; then
            echo "‚úÖ API endpoint responding"
          else
            echo "‚ö†Ô∏è API endpoint not responding"
          fi
          
          # Test de la page principale
          if curl -f -s "${{ secrets.RENDER_URL }}" > /dev/null; then
            echo "‚úÖ Main page responding"
          else
            echo "‚ö†Ô∏è Main page not responding"
          fi
        else
          echo "‚ÑπÔ∏è RENDER_URL not configured, skipping verification"
        fi

  post-deploy-validation:
    needs: deploy-to-render
    runs-on: ubuntu-latest
    name: Post-Deploy Validation
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
    - name: Post-deploy Lighthouse audit
      run: |
        echo "üí° Post-deploy Lighthouse audit"
        echo "==============================="
        
        if [ -n "${{ secrets.RENDER_URL }}" ]; then
          # Install Lighthouse
          npm install -g lighthouse
          
          # Run Lighthouse audit on deployed app
          lighthouse ${{ secrets.RENDER_URL }} \
            --output=json \
            --output-path=./UF-Zoom/metrics/lighthouse-post-deploy.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --only-categories=performance,accessibility,best-practices,seo || echo "‚ö†Ô∏è Post-deploy Lighthouse audit failed"
          
          # Extract and display key metrics
          if [ -f "./UF-Zoom/metrics/lighthouse-post-deploy.json" ]; then
            echo "üìä Post-Deploy Lighthouse Results:"
            cat ./UF-Zoom/metrics/lighthouse-post-deploy.json | jq -r '.categories.performance.score * 100 | "Performance: \(.)%"' || echo "Performance: N/A"
            cat ./UF-Zoom/metrics/lighthouse-post-deploy.json | jq -r '.categories.accessibility.score * 100 | "Accessibility: \(.)%"' || echo "Accessibility: N/A"
            cat ./UF-Zoom/metrics/lighthouse-post-deploy.json | jq -r '.categories["best-practices"].score * 100 | "Best Practices: \(.)%"' || echo "Best Practices: N/A"
          fi
        else
          echo "‚ÑπÔ∏è RENDER_URL not configured, skipping post-deploy audit"
        fi
      
    - name: Post-deploy EcoIndex
      run: |
        echo "üåç Post-deploy EcoIndex"
        echo "======================"
        
        if [ -f "./UF-Zoom/metrics/lighthouse-post-deploy.json" ]; then
          PERFORMANCE=$(cat ./UF-Zoom/metrics/lighthouse-post-deploy.json | jq -r '.categories.performance.score * 100')
          
          # Calcul EcoIndex bas√© sur performance
          if (( $(echo "$PERFORMANCE > 90" | bc -l) )); then
            ECO_SCORE=95
            ECO_GRADE="A"
          elif (( $(echo "$PERFORMANCE > 70" | bc -l) )); then
            ECO_SCORE=85
            ECO_GRADE="B"
          elif (( $(echo "$PERFORMANCE > 50" | bc -l) )); then
            ECO_SCORE=75
            ECO_GRADE="C"
          elif (( $(echo "$PERFORMANCE > 30" | bc -l) )); then
            ECO_SCORE=65
            ECO_GRADE="D"
          else
            ECO_SCORE=45
            ECO_GRADE="E"
          fi
          
          echo "{\"score\": $ECO_SCORE, \"grade\": \"$ECO_GRADE\", \"performance\": $PERFORMANCE, \"post-deploy\": true}" > ./UF-Zoom/metrics/ecoindex-post-deploy.json
          echo "üìä Post-Deploy EcoIndex: Score $ECO_SCORE, Grade $ECO_GRADE"
        else
          echo "{\"score\": 50, \"grade\": \"E\", \"note\": \"simulation\", \"post-deploy\": true}" > ./UF-Zoom/metrics/ecoindex-post-deploy.json
          echo "üìä Post-Deploy EcoIndex: Score 50, Grade E (simulation)"
        fi
      
    - name: Upload post-deploy metrics
      uses: actions/upload-artifact@v4
      with:
        name: post-deploy-metrics
        path: |
          UF-Zoom/metrics/lighthouse-post-deploy.json
          UF-Zoom/metrics/ecoindex-post-deploy.json
        retention-days: 30
      if: always()

  notify-deployment:
    needs: [deploy-to-render, post-deploy-validation]
    runs-on: ubuntu-latest
    name: Deployment Summary
    if: always()
    
    steps:
    - name: Download metrics
      uses: actions/download-artifact@v4
      with:
        path: ./metrics
      
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "Branch: ${{ github.ref_name | replace("/", "-") }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Deployment URL: ${{ secrets.RENDER_URL }}"
        echo ""
        
        if [ "${{ needs.deploy-to-render.result }}" == "success" ]; then
          echo "‚úÖ Deploy: SUCCESS"
        else
          echo "‚ùå Deploy: FAILED"
        fi
        
        if [ "${{ needs.post-deploy-validation.result }}" == "success" ]; then
          echo "‚úÖ Post-deploy validation: SUCCESS"
        else
          echo "‚ö†Ô∏è Post-deploy validation: FAILED"
        fi
        
        echo ""
        echo "üìä Eco Metrics Summary:"
        
        # Display pre-deploy metrics
        if [ -f "./metrics/eco-metrics-pre-deploy/UF-Zoom/metrics/ecoindex-pre-deploy.json" ]; then
          echo "Pre-deploy:"
          cat ./metrics/eco-metrics-pre-deploy/UF-Zoom/metrics/ecoindex-pre-deploy.json | jq -r '"  Score: \(.score), Grade: \(.grade)"'
        fi
        
        # Display post-deploy metrics
        if [ -f "./metrics/post-deploy-metrics/UF-Zoom/metrics/ecoindex-post-deploy.json" ]; then
          echo "Post-deploy:"
          cat ./metrics/post-deploy-metrics/UF-Zoom/metrics/ecoindex-post-deploy.json | jq -r '"  Score: \(.score), Grade: \(.grade)"'
        fi
        
        echo ""
        echo "üéØ EPCT Workflow:"
        echo "- Explore: ‚úÖ Completed"
        echo "- Plan: ‚úÖ Completed"
        echo "- Code: ‚úÖ Completed"
        echo "- Test: ‚úÖ Completed" 