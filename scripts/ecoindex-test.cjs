#!/usr/bin/env node

/**
 * EcoIndex Test Script
 * Teste et calcule le score EcoIndex pour la comp√©tence C2
 * Auteur : Yassen ABARJI
 * Date : 04/09/2025

 */

const fs = require('fs');
const path = require('path');

// Configuration
const METRICS_DIR = path.join(__dirname, '../UF-Zoom/metrics');
const RESULTS_FILE = path.join(METRICS_DIR, 'ecoindex-test-results.json');

// M√©triques EcoIndex (simulation bas√©e sur Lighthouse)
const calculateEcoIndex = (performance, accessibility, bestPractices, seo) => {
  // Calcul bas√© sur les bonnes pratiques EcoIndex
  let score = 0;
  
  // Performance (40% du score)
  score += (performance / 100) * 40;
  
  // Accessibilit√© (20% du score)
  score += (accessibility / 100) * 20;
  
  // Bonnes pratiques (25% du score)
  score += (bestPractices / 100) * 25;
  
  // SEO (15% du score)
  score += (seo / 100) * 15;
  
  return Math.round(score);
};

// D√©terminer le grade EcoIndex
const getEcoGrade = (score) => {
  if (score >= 90) return 'A';
  if (score >= 80) return 'B';
  if (score >= 70) return 'C';
  if (score >= 60) return 'D';
  if (score >= 50) return 'E';
  return 'F';
};

// Test principal
const runEcoIndexTest = async () => {
  console.log('üå± EcoIndex Test - Comp√©tence C2');
  console.log('================================');
  
  try {
    // Cr√©er le dossier metrics s'il n'existe pas
    if (!fs.existsSync(METRICS_DIR)) {
      fs.mkdirSync(METRICS_DIR, { recursive: true });
    }
    
    // Simuler les m√©triques Lighthouse (en production, ceci viendrait de Lighthouse)
    const lighthouseMetrics = {
      performance: 25,      // Baseline C2
      accessibility: 85,    // Bonne accessibilit√©
      bestPractices: 70,   // Bonnes pratiques
      seo: 80             // SEO correct
    };
    
    // Calculer EcoIndex
    const ecoIndexScore = calculateEcoIndex(
      lighthouseMetrics.performance,
      lighthouseMetrics.accessibility,
      lighthouseMetrics.bestPractices,
      lighthouseMetrics.seo
    );
    
    const ecoGrade = getEcoGrade(ecoIndexScore);
    
    // R√©sultats
    const results = {
      timestamp: new Date().toISOString(),
      ecoIndex: {
        score: ecoIndexScore,
        grade: ecoGrade,
        metrics: lighthouseMetrics
      },
      analysis: {
        performance: {
          score: lighthouseMetrics.performance,
          status: lighthouseMetrics.performance >= 90 ? 'excellent' : 
                  lighthouseMetrics.performance >= 70 ? 'good' :
                  lighthouseMetrics.performance >= 50 ? 'fair' : 'poor'
        },
        accessibility: {
          score: lighthouseMetrics.accessibility,
          status: lighthouseMetrics.accessibility >= 90 ? 'excellent' : 'good'
        },
        bestPractices: {
          score: lighthouseMetrics.bestPractices,
          status: lighthouseMetrics.bestPractices >= 80 ? 'excellent' : 'good'
        },
        seo: {
          score: lighthouseMetrics.seo,
          status: lighthouseMetrics.seo >= 80 ? 'excellent' : 'good'
        }
      },
      recommendations: [
        'Optimiser les Core Web Vitals pour am√©liorer le score EcoIndex',
        'R√©duire la taille des bundles JavaScript et CSS',
        'Impl√©menter le lazy loading pour les images et composants',
        'Optimiser le cache et les headers HTTP'
      ]
    };
    
    // Sauvegarder les r√©sultats
    fs.writeFileSync(RESULTS_FILE, JSON.stringify(results, null, 2));
    
    // Affichage
    console.log(`üìä EcoIndex Score: ${ecoIndexScore}/100 (Grade ${ecoGrade})`);
    console.log(`üìà M√©triques d√©taill√©es:`);
    console.log(`   - Performance: ${lighthouseMetrics.performance}/100`);
    console.log(`   - Accessibilit√©: ${lighthouseMetrics.accessibility}/100`);
    console.log(`   - Bonnes pratiques: ${lighthouseMetrics.bestPractices}/100`);
    console.log(`   - SEO: ${lighthouseMetrics.seo}/100`);
    console.log(`üí° Recommandations: ${results.recommendations.length} suggestions`);
    console.log(`üíæ R√©sultats sauvegard√©s: ${RESULTS_FILE}`);
    
    return results;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test EcoIndex:', error.message);
    throw error;
  }
};

// Ex√©cution si appel√© directement
if (require.main === module) {
  runEcoIndexTest()
    .then(() => {
      console.log('‚úÖ Test EcoIndex termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test EcoIndex √©chou√©:', error.message);
      process.exit(1);
    });
}

module.exports = { runEcoIndexTest, calculateEcoIndex, getEcoGrade }; 

